# Enumerating data with control structures (error handling)

from enum import Enum


class Employee:

    MIN_ID = 100
    MAX_ID = 999
    DEFAULT_EMP_NUMBER = 999

    class Shift(Enum):
        DAY = 1
        SWING = 2
        NIGHT = 3

        def __str__(self):
            return self.name[0].upper() + self.name[1:].lower()

    def __init__(self, emp_name="(unidentified)", emp_number=999, emp_shift=1, benefits=False):
        if not self.set_emp_name(emp_name):
            self.emp_name = emp_name
        if not self.set_emp_number(emp_number):
            self.emp_number = emp_number
        if not self.set_emp_shift(emp_shift):
            self.emp_shift = emp_shift
        if not self.determine_benefits(emp_number):
            self.benefits = benefits

# Getters
    def get_emp_shift(self):
        return self.emp_shift

    def get_emp_number(self):
        return self.emp_number

    def get_emp_name(self):
        return self.emp_name

    def get_benefits(self):
        self.benefits = self.determine_benefits(self.emp_number)
        return self.benefits

# Setters
    def set_emp_name(self, name):
        self.emp_name = name
        return True

    def set_emp_shift(self, shift=1):
        if shift == 1:
            self.emp_shift = Employee.Shift.DAY

        if shift == 2:
            self.emp_shift = Employee.Shift.SWING

        if shift == 3:
            self.emp_shift = Employee.Shift.NIGHT

        return True

    def set_emp_number(self, number):
        while True:
            try:
                if not Employee.MIN_ID <= int(number) <= Employee.MAX_ID:
                    print(f"ID for {self.emp_name.upper()} out of range. {Employee.MIN_ID} to {Employee.MAX_ID}")
                    return False
                else:
                    self.emp_number = number
                    return True

            except ValueError as e:
                print(f"Value Error. {e}")
                break

    def determine_benefits(self, number):
        try:
            if not 100 <= number <= 999:
                self.emp_number = self.DEFAULT_EMP_NUMBER
                self.benefits = True
                return False

            if 100 <= number <= 499:
                self.benefits = False
                return False

            if number >= 500:
                self.benefits = True
                return True
            else:
                self.benefits = "Invalid ID#"
        except TypeError:
            print(f"ID: {number} invalid.")

    def __str__(self):
        return "Employee name: {} \nBenefits (T or F): {}\n" \
               "Employee ID: {}\n" \
               "Shift: {}\n".format(self.emp_name, self.benefits, self.emp_number, self.emp_shift)





def main():
    emp1 = Employee("Jennifer", 199, 2)
    emp2 = Employee("Sam Lara", 501, 1)
    emp3 = Employee()
    print(emp1)
    print(emp2)
    print(emp3)

main()
